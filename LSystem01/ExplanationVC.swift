//
//  ExplanationVC.swift
//  LSystem01
//
//  Created by Jeff Holtzkener on 5/4/16.
//  Copyright © 2016 Jeff Holtzkener. All rights reserved.
//

import UIKit

class ExplanationVC: UIViewController {
    
    var diagram =  UIImageView()
    var scrollView = UIScrollView()
    var text = UILabel()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        createViews()
        positionViews()
       
        // Do any additional setup after loading the view.
    }
    
    override func viewWillLayoutSubviews() {
        positionViews()
    }
    
    func createViews() {
        let image = UIImage(named: "diagramWithLabels")
        diagram.contentMode = .ScaleAspectFit
        diagram.image = image
        print(diagram.image)
        view.addSubview(diagram)
        

        text.text = "This app generates tree fractals from simple generative rule systems. \n\n☞  In the rule system pictured here, there are two types of nodes: blue nodes and purple nodes. \n\n☞  The blue parent node type is selected as the root node (this can be controlled with a slider).  \n\n☞  The blue node branches into a purple node and a blue node, so each time a blue line segment occurs it will branch into purple segment and another blue segment (each segment is 90% of the length of its parent.)  Purple nodes will simply generate more purple segments indefinitely.  \n\n☞  A node will be marked unreachable if there is no way to generate that node from the current starting node.  The circles at the top of the node diagrams indicate which node types are capable of generating that node (possible ancestors).  If the top circle is gray, then no node generates that node.  A node is unreachable when either its top circle is gray, or the node can only generated by other nodes whose top circle is gray.  \n\n☞  The tree will continue recursively generating new branches according to the rule system until the total number of nodes exceeds \(Settings.sharedInstance.maxNumberOfNodes), the line segments are shorter than one pixel in length, or 50 generations have passed.  \n\n☞  The knobs at the bottom of the main screen control the angle at which that each node type will branch out from its parent node (relative to the orientation of its specific parent node)."
       
        text.font = Constants.font
        text.adjustsFontSizeToFitWidth = true
//        text.minimumScaleFactor = 11
        text.textColor = UIColor.blackColor()
        text.numberOfLines = 40
        text.textAlignment = .Justified
        scrollView.addSubview(text)
        view.addSubview(scrollView)
    }
    
    func positionViews() {
        scrollView.removeFromSuperview()
        text.removeFromSuperview()
        let navOffset = self.navigationController?.navigationBar.frame.height ?? 0
        
        var diagramRect: CGRect
        var scrollRect: CGRect
        var textRect: CGRect
        if view.bounds.width > view.bounds.height {
            // landscape
            diagramRect = CGRect(x: 0, y: navOffset, width: view.bounds.width / 2, height: view.bounds.height - navOffset)
            scrollRect = CGRect(x: (view.bounds.width / 2) + 10, y: navOffset, width: (view.bounds.width / 2) - 20, height: view.bounds.height - navOffset)
        } else {
            // portrait
            diagramRect = CGRect(x: 0, y: navOffset, width: view.bounds.width, height: (view.bounds.height - navOffset) / 2)
            diagram.frame = diagramRect
            scrollRect = CGRect(x: 10, y: navOffset + (view.bounds.height - navOffset) / 2, width: view.bounds.width - 20, height: (view.bounds.height - navOffset) / 2)
            
        }
        diagram.frame = diagramRect
//        textRect = CGRect(x: 10, y: 0, width: scrollRect.width - 20, height: scrollRect.height)
//        text.frame = textRect
        scrollView.frame = scrollRect
        scrollView.contentSize = CGSize(width: scrollView.bounds.width, height: scrollView.bounds.height * 3)
         textRect = CGRect(x: 10, y: 0, width: scrollRect.width - 20, height: scrollRect.height * 3)
        text.frame = textRect
        scrollView.addSubview(text)
        
        view.addSubview(scrollView)
       
    }

   
}
